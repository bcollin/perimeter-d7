<?php

/**
 * Returns an array of patters of banned requests.
 */
function perimeter_patterns() {
  // @todo Why does the D8 version define its patterns the way it does,
  //     i.e. some starting with /, others not?
  $patterns = array(
    '/.*\.aspx/',
    '/.*\.asp/',
    '/.*\.jsp/',
    '/\/blog_edit\.php/',
    '/\/blogs\.php/',
    '/\/wp-admin.*/',
    '/\/wp-login.*/',
    '/\/my_blogs/',
    '/\/system\/.*\.php/',
    '/.*systopice.*/',
    '/.*login.json/',
  );

  return $patterns;
}

/**
 * Called by includes/common.inc:drupal_deliver_page().
 * This lets us divert the page callback through our own function.
 */
function perimeter_page_delivery_callback_alter(&$callback) {
  if ($callback === 'drupal_deliver_html_page') {
    $callback = 'perimeter_html_delivery_callback';
  }
}

/**
 * Callback for drupal_deliver_page().
 *
 * This function is called outside of any access checks, and has the
 * potential to re-route all of Drupal's page requests, so be careful
 * what you do within this function.
 */
function perimeter_html_delivery_callback($page_callback_result) {
  if ($page_callback_result === MENU_NOT_FOUND) {
    perimeter_banned_urls_handler();
  }

  // Now that we have done our thing (or not), call the original handler.
  drupal_deliver_html_page($page_callback_result);
}

/**
 * On 'page not found' events, ban the IP if the request is suspicious.
 *
 * Only call this function on MENU_NOT_FOUND.
 */
function perimeter_banned_urls_handler() {

  $banned_patterns = perimeter_patterns();

  // Prefix a slash, because that is what D8 does and this way
  // we keep the patterns compatible.
  $request_path = '/' . request_path();

  foreach ($banned_patterns as $pattern) {
    if (preg_match($pattern, $request_path)) {
      $ip = trim($_SERVER['REMOTE_ADDR']);

      if (_perimeter_ban_ip($ip)) {
        watchdog(
          'perimeter',
          'Banned: %ip for requesting %pattern <br />Source: %source <br /> User Agent: %browser',
          array(
            '%ip' => $ip,
            '%pattern' => filter_xss($pattern),
            '%source' => isset($_SERVER['HTTP_REFERER']) ? filter_xss($_SERVER['HTTP_REFERER']) : '',
            '%browser' => isset($_SERVER['HTTP_USER_AGENT']) ? filter_xss($_SERVER['HTTP_USER_AGENT']) : '',
          ),
          WATCHDOG_NOTICE
        );
      }
      break;
    }
  }
}

/**
 * Bans IP address $ip.
 *
 * @param string $ip
 *   IP address.
 *
 * @param bool $return_only
 *   Returns the result without banning.
 *
 * @return bool
 *   TRUE if $ip can be blocked legally, FALSE otherwise.
 */
function _perimeter_ban_ip($ip, $return_only = FALSE) {
  // These three tests were borrowed from
  //     system_ip_blocking_form_validate().
  $is_already_blocked = db_query("SELECT * FROM {blocked_ips} WHERE ip = :ip", array(':ip' => $ip))->fetchField();
  $is_own_ip = ($ip == ip_address());
  $is_valid_ip = filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE);

  $bannable = !$is_already_blocked && !$is_own_ip && $is_valid_ip;

  if ($bannable) {
    if (!$return_only) {
      db_insert('blocked_ips')
        ->fields(array('ip' => $ip))
        ->execute();
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function perimeter_menu() {
  $items = array();

  $items['admin/config/system/perimeter'] = array(
    'title' => 'Perimeter Defence',
    'description' => 'Set the paths that will get visitors banned.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('perimeter_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: Perimeter Defence settings
 *
 * @see perimeter_menu()
 */
function perimeter_config_form($form, &$form_state) {
  $default_patterns = implode("\r\n", perimeter_patterns());

  $form['perimeter_blacklist'] = array(
    '#type' => 'textarea',
    '#title' => t('Paths\' blacklist'),
    '#default_value' => variable_get('perimeter_blacklist', $default_patterns),
    '#description' => t('If a visitor requests a page of which the path matches one of these regular expressions, that visitor will get banned from the site. Use one pattern per line. Patterns should start and end with the same delimiter (for example a forward slash). See the PHP documentation for an <a href="https://www.php.net/manual/en/reference.pcre.pattern.syntax.php" target="_blank" rel="noopener">explanation of patterns</a>.'),
    '#required' => FALSE,
  );
  $form['perimeter_default_blacklist_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default blacklist'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['perimeter_default_blacklist_fieldset']['default_blacklist'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('Replace your patterns with the ones below if you want to restore the defaults.') . '</p><pre>' . implode("<br>", perimeter_patterns()) . '</pre>',
  );

  return system_settings_form($form);
}

/**
 * Implements validation from the Form API.
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 *
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function perimeter_config_form_validate($form, &$form_state){
  $blacklist = $form_state['values']['perimeter_blacklist'];

  $blacklist_r = explode("\r\n", $blacklist);
  $has_mismatched_delimeters = FALSE;
  $mismatched_delimiters = array();
  foreach ($blacklist_r as $pattern) {
    $len = strlen($pattern);
    if (substr($pattern, 0, 1) !== substr($pattern, ($len-1), 1)) {
      $has_mismatched_delimeters = TRUE;
      $mismatched_delimiters[] = '<code>' . $pattern . '</code>';
    }
  }
  if (!empty($mismatched_delimiters[0])) {
    $mismatched_delimiters = implode('</li><li>', $mismatched_delimiters);
    $mismatched_delimiters = '<ul><li>' . $mismatched_delimiters . '</li></ul>';
  }
  else {
    $mismatched_delimiters = '';
  }

  if ($blacklist === '') {
    form_set_error('perimeter_blacklist', t('Enter at least one pattern. See the <a href="#edit-perimeter-default-blacklist-fieldset">default patterns</a> below for examples.'));
  }
  elseif($has_mismatched_delimeters) {
    form_set_error('perimeter_blacklist', t('You have mismatched delimiters for the following patterns:') . $mismatched_delimiters);
  }
}

/**
 * Implements hook_help().
 *
 * @return string
 *   HTML containing the contents of README.txt.
 */
function perimeter_help($path, $arg) {
  $out = '';
  switch ($path) {
    case 'admin/help#perimeter':
      // Crudely and lazily inline the README.txt file.
      $filepath = dirname(__FILE__) . '/README.txt';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
  }

  if (!empty($readme)) {
    $out = "<pre>$readme</pre>";
  }

  return $out;
}
